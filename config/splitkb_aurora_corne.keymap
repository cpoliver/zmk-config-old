/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// #include <dt-bindings/zmk/mouse.h>

&left_encoder { steps = <30>; };

&right_encoder { steps = <30>; };

/ {
    behaviors {
        // mouse_move: mouse_move {
        //     compatible = "zmk,behavior-mouse-move";
        //     label = "MOUSE_MOVE";
        //     #binding-cells = <1>;
        // };

        th: th {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
        };

        // mouse_scroll: mouse_scroll {
        //     compatible = "zmk,behavior-mouse-scroll";
        //     label = "MOUSE_SCROLL";
        //     #binding-cells = <1>;
        // };
        /* Encoder */

        enc_num: enc_num {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_NUM";
            #sensor-binding-cells = <0>;
            bindings = <&num_inc>, <&num_dec>;
        };

        num_inc: num_inc {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_INC";
            #binding-cells = <0>;
            bindings =
                <&kp N0>,
                <&kp N1>,
                <&kp N2>,
                <&kp N3>,
                <&kp N4>,
                <&kp N5>,
                <&kp N6>,
                <&kp N7>,
                <&kp N8>,
                <&kp N9>;
        };

        num_dec: num_dec {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DEC";
            #binding-cells = <0>;
            bindings =
                <&kp N9>,
                <&kp N8>,
                <&kp N7>,
                <&kp N6>,
                <&kp N5>,
                <&kp N4>,
                <&kp N3>,
                <&kp N2>,
                <&kp N1>,
                <&kp N0>;
        };

        /* Home Row Mods */

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 18 30 39 40 41 31 10 8 21 19 20 34 33 32 23 22 35 11 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 12 0 13 2 3 4 5 14 16 15 17 29 38 37 36 28 27 26 25 24>;
        };

        maths: maths {
            compatible = "zmk,behavior-tap-dance";
            label = "MATHS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp KP_PLUS>,
                <&kp KP_SUBTRACT>,
                <&kp KP_MULTIPLY>,
                <&kp KP_DIVIDE>,
                <&kp CARET>;
        };

        /* Send String */
        // fatarrow: fatarrow {
        //     compatible = "zmk,behavior-send-string";
        //     label = "FATARROW";
        //     #binding-cells = <0>;
        //     text = "=>";
        // };
        // tap_fatarrow: tap_fatarrow {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "TAP_FATARROW";
        //     bindings = <&tap_fatarrow>, <&kp>;
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     flavor = "tap-preferred";
        // };
    };

    keymap {
        compatible = "zmk,keymap";

        bse {
            bindings = <
&th LA(LC(LGUI)) ENTER       &kp Q         &kp W         &kp E          &kp R        &kp T                        &kp Y                      &kp U            &kp I        &kp O         &kp P                &th LA(LC(LGUI)) GRAVE
&th LS(LA(LC(LGUI))) Q       &hml LSHFT A  &hml LCTRL S  &hml LALT D    &hml LGUI F  &hml LA(LC(LEFT_SHIFT)) G    &hmr LA(LC(LEFT_SHIFT)) H  &hmr RGUI J      &hmr RALT K  &hmr RCTRL L  &hmr RSHFT SEMI      &hmr RS(RC(RA(RGUI))) SQT
&th LS(LA(LCTRL)) BACKSPACE  &kp Z         &kp X         &kp C          &kp V        &kp B                        &kp N                      &kp M            &kp COMMA    &kp DOT       &th BACKSLASH SLASH  &th LS(LA(LCTRL)) LG(GRAVE)
                                                         &lt 2 LG(TAB)  &lt 1 SPACE  &kp K_MUTE                   &kp K_PLAY_PAUSE           &lt 4 BACKSPACE  &lt 5 RET
            >;

            sensor-bindings =
                <&inc_dec_kp LG(LS(Z)) LG(Z)>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &th CARET PERCENT    &kp N7         &kp N8        &kp N9        &kp K_NEXT          &kp HOME   &kp LBRC   &kp UP     &kp RBRC      &kp END    &trans
&trans  &hml LSHFT N0        &hml LCTRL N4  &hml LALT N5  &hml LGUI N6  &kp K_PLAY_PAUSE    &kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT     &kp PG_UP  &trans
&trans  &th KP_DOT KP_COMMA  &kp N1         &kp N2        &kp N3        &kp KP_EQUAL        &trans     &kp MINUS  &kp EQUAL  &kp LG(PLUS)  &trans     &trans
                                            &trans        &trans        &trans              &trans     &trans     &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PG_UP PG_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        mse {
            bindings = <
&trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp MB2  &mkp MB1  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>, <&inc_dec_kp 0 0>;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&th GREATER_THAN LESS_THAN              &kp LS(PRCNT)  &kp N7  &kp N8  &kp N9  &th KP_MULTIPLY PLUS    &th PLUS KP_MULTIPLY  &kp N7  &kp N8  &kp N9  &kp LS(PRCNT)  &th GREATER_THAN LESS_THAN
&th RIGHT_PARENTHESIS LEFT_PARENTHESIS  &kp N0         &kp N4  &kp N5  &kp N6  &kp EQUAL               &kp EQUAL             &kp N4  &kp N5  &kp N6  &kp N0         &th RIGHT_PARENTHESIS LEFT_PARENTHESIS
&kp CARET                               &th COMMA DOT  &kp N1  &kp N2  &kp N3  &th MINUS KP_DIVIDE     &th MINUS KP_DIVIDE   &kp N1  &kp N2  &kp N3  &th DOT COMMA  &kp CARET
                                                               &trans  &trans  &trans                  &trans                &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&enc_num>;
        };

        sym {
            bindings = <
&trans  &kp LS(N1)  &kp LS(N2)                      &kp LS(N3)                  &kp LS(N4)                              &kp LS(N5)    &kp LS(N6)  &kp LS(N7)  &kp LS(N8)           &kp LA(N3)  &kp GRAVE  &trans
&trans  &th GT LT   &th RIGHT_BRACKET LEFT_BRACKET  &th RIGHT_BRACE LEFT_BRACE  &th RIGHT_PARENTHESIS LEFT_PARENTHESIS  &kp EQUAL     &trans      &kp MINUS   &th UNDER TILDE2     &kp EQUAL   &kp PIPE   &trans
&trans  &trans      &trans                          &trans                      &trans                                  &trans        &trans      &trans      &trans               &trans      &trans     &trans
                                                    &kp LALT                    &trans                                  &trans        &trans      &trans      &th LC(LS(P)) ENTER
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&inc_dec_kp UP DOWN>;
        };

        sys {
            bindings = <
&soft_off      &trans         &gresc         &out OUT_TOG   &ext_power EP_TOG  &bootloader    &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&bt BT_SEL 4   &bt BT_SEL 3   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0       &bt BT_CLR     &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&bt BT_DISC 4  &bt BT_DISC 3  &bt BT_DISC 2  &bt BT_DISC 1  &bt BT_DISC 0      &sys_reset     &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
                                             &trans         &trans             &trans         &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>, <&inc_dec_kp 0 0>;
        };

        fig {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>, <&inc_dec_kp 0 0>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        thumbs_main {
            if-layers = <1 5>;
            then-layer = <4>;
        };

        // thumbs_alt {
        //     if-layers = <5 4>;
        //     then-layer = <7>;
        // };
    };
};
