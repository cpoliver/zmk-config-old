/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/mouse.h>

&left_encoder  { steps = <30>; };
&right_encoder { steps = <30>; };

/ {
    behaviors {
        // mouse_move: mouse_move {
        //     compatible = "zmk,behavior-mouse-move";
        //     label = "MOUSE_MOVE";
        //     #binding-cells = <1>;
        // };

        th: th {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
        };

        // mouse_scroll: mouse_scroll {
        //     compatible = "zmk,behavior-mouse-scroll";
        //     label = "MOUSE_SCROLL";
        //     #binding-cells = <1>;
        // };

        /* Encoder */

        enc_num: enc_num {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_NUM";
            #sensor-binding-cells = <0>;
            bindings = <&num_inc>, <&num_dec>;
        };

        num_inc: num_inc {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_INC";
            #binding-cells = <0>;
            bindings =
                <&kp N0>,
                <&kp N1>,
                <&kp N2>,
                <&kp N3>,
                <&kp N4>,
                <&kp N5>,
                <&kp N6>,
                <&kp N7>,
                <&kp N8>,
                <&kp N9>;
        };
 
        num_dec: num_dec {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DEC";
            #binding-cells = <0>;
            bindings =
                <&kp N9>,
                <&kp N8>,
                <&kp N7>,
                <&kp N6>,
                <&kp N5>,
                <&kp N4>,
                <&kp N3>,
                <&kp N2>,
                <&kp N1>,
                <&kp N0>;
        };

        /* Home Row Mods */

       hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 18 30 39 40 41 31 10 8 21 19 20 34 33 32 23 22 35 11 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 12 0 13 2 3 4 5 14 16 15 17 29 38 37 36 28 27 26 25 24>;
        };

        /* Send String */

        // fatarrow: fatarrow {
        //     compatible = "zmk,behavior-send-string";
        //     label = "FATARROW";
        //     #binding-cells = <0>;
        //     text = "=>";
        // };

        // tap_fatarrow: tap_fatarrow {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "TAP_FATARROW";
        //     bindings = <&tap_fatarrow>, <&kp>;

        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     flavor = "tap-preferred";
        // };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
           
            bindings = <
&th LA(LC(LGUI)) ENTER       &kp Q         &kp W         &kp E             &kp R        &kp T                   &kp Y                         &kp U            &kp I        &kp O         &kp P                     &th LA(LC(LGUI)) GRAVE
&th LS(LA(LC(LGUI))) ESCAPE  &hml LSHFT A  &hml LCTRL S  &hml LALT D       &hml LGUI F  &hml LS(LA(LCTRL)) G    &deletethis1 RS(RA(RCTRL)) H  &hmr RGUI J      &hmr RALT K  &hmr RCTRL L  &hmr RSHFT SEMI           &hmr RS(RC(RA(RGUI))) SQT
&th LS(LA(LCTRL)) BACKSPACE  &kp Z         &kp X         &kp C             &kp V        &kp B                   &kp N                         &kp M            &kp COMMA    &kp DOT       &th BACKSLASH SLASH  &th LS(LA(LCTRL)) LG(GRAVE)
                                                              &kp K_PLAY_PAUSE  &lt 2 SPACE  &lt 6 TAB               &lt 4 ENTER                   &lt 3 BACKSPACE  &kp K_MUTE
            >;

            sensor-bindings =
                <&inc_dec_kp LG(EQUAL) LG(MINUS)>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1         &kp N2         &kp N3        &kp N4        &kp N5                   &trans         &th END PG_DN    &kp UP                    &th HOME PG_UP  &trans     &trans
&trans  &hml LSHFT N1  &hml LCTRL N2  &hml LALT N3  &hml LGUI N4  &hml LS(LA(LCTRL)) N5    &kp LG(LS(Z))  &kp LEFT              &kp DOWN                  &kp RIGHT            &kp LG(Z)  &trans
&trans  &kp N6         &kp N7         &kp N8        &kp N9        &kp N0                   &trans         &th LG(X) LG(C)  &th LG(V) LG(LS(V))  &kp LG(X)            &trans     &trans
                                      &trans        &trans        &trans                   &trans         &trans                &trans
            >;

            sensor-bindings =
                <&inc_dec_kp PG_UP PG_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp FSLH  &kp LS(STAR)  &kp MINUS  &kp LS(PLUS)  &kp PERCENT    &kp CARET     &th KP_COMMA KP_DOT  &kp PERCENT   &kp LPAR         &kp RPAR       &trans
&trans  &kp N1    &kp N2        &kp N3     &kp N4        &kp N5         &kp N6        &kp N7                    &kp N8        &kp N9           &kp N0         &trans
&trans  &kp N6    &kp N7        &kp N8     &kp N9        &kp N0         &kp KP_EQUAL  &kp KP_PLUS               &kp KP_MINUS  &kp KP_MULTIPLY  &kp KP_DIVIDE  &trans
                                &trans     &trans        &trans         &trans        &trans                    &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&enc_num>;
        };

        symbol {
            bindings = <
&trans  &kp LS(N1)      &kp LS(N2)                           &kp LS(N3)                       &kp LS(N4)                                   &kp LS(N5)       &kp LS(N6)  &kp LS(N7)  &kp LS(N8)                &kp LA(N3)  &kp GRAVE  &trans
&trans  &th GT LT  &th RIGHT_BRACKET LEFT_BRACKET  &th RIGHT_BRACE LEFT_BRACE  &th RIGHT_PARENTHESIS LEFT_PARENTHESIS  &kp EQUAL    &trans      &kp MINUS   &th UNDER TILDE2     &kp EQUAL   &kp PIPE   &trans
&trans  &trans          &trans                               &trans                           &trans                                       &trans           &trans      &trans      &trans                    &trans      &trans     &trans
                                                             &kp LALT                         &trans                                       &trans           &trans      &trans      &th LC(LS(P)) ENTER
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>, <&inc_dec_kp UP DOWN>;
        };

//         mouse {
//             bindings = <
// &trans  &trans  &trans  &trans  &trans  &trans    &trans                     &mouse_scroll SCROLL_DOWN  &mmv MOVE_UP    &mouse_scroll SCROLL_UP  &trans                      &trans
// &trans  &trans  &trans  &trans  &trans  &trans    &mouse_scroll SCROLL_LEFT  &mmv MOVE_LEFT             &mmv MOVE_DOWN  &mmv MOVE_RIGHT          &mouse_scroll SCROLL_RIGHT  &trans
// &trans  &trans  &trans  &trans  &trans  &trans    &trans                     &trans                     &trans          &trans                   &trans                      &trans
//                         &trans  &trans  &trans    &trans                     &trans                     &trans
//             >;

//             sensor-bindings = <&inc_dec_kp 0 0>, <&inc_dec_kp 0 0>;
//         };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>, <&inc_dec_kp 0 0>;
        };

        util {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>, <&inc_dec_kp 0 0>;
        };

        figma {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>, <&inc_dec_kp 0 0>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        thumbs_main {
            if-layers = <2 3>;
            then-layer = <1>;
        };

        // thumbs_alt {
        //     if-layers = <5 4>;
        //     then-layer = <7>;
        // };
    };
};
